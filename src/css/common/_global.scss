* {
  box-sizing: border-box;
}

.container {
  width: 100%;
}

.content {
  width: 75%;
}

.page {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
}

.page-content {
  width: 85%;
  margin: 0 auto;
  padding: 15px 0;
}

.q {
  &-m {
    &-auto {
      margin: auto;
    }
    &-0 {
      margin: 0;
    }
    &t {
      &-0 {
        margin-top: 0;
      }
    }
    &b {
      &-0 {
        margin-bottom: 0;
      }
    }
    &l {
      &-0 {
        margin-left: 0;
      }
    }
    &r {
      &-0 {
        margin-right: 0;
      }
    }
    &x {
      &-0 {
        margin-left: 0;
        margin-right: 0;
      }
    }
    &y {
      &-0 {
        margin-top: 0;
        margin-bottom: 0;
      }
    }
  }
}

.h {
  &-100 {
    height: 100%;
  }
}

.text {
  &-small {
    font-size: 12px;
  }
}

.no-scroll {
  overflow: hidden !important;
}

.color {
  &-primary {
    color: $primary;
  }
  &-secondary {
    color: $secondary;
  }
  &-accent {
    color: $accent;
  }
  &-disabled {
    color: $disabled;
  }
  &-white {
    color: $white;
  }
  &-dark {
    color: $dark;
  }
  &-black {
    color: #000;
  }
}

.rounded {
  border-radius: 10px;
}

.cursor {
  &-move {
    cursor: move;
  }
  &-grab {
    cursor: grab;
  }
  &-grabbing {
    cursor: grabbing;
  }
}

.link {
  color: -webkit-link;
  cursor: pointer;
  text-decoration: underline;
}

.relative {
  position: relative;
}

.no-hover {
  pointer-events: none;
}

.bordered {
  border: 1px solid rgba(0, 0, 0, 0.12);
  &-top {
    border-top: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-top: none;
    }
  }
  &-bottom {
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-bottom: none;
    }
  }
  &-left {
    border-left: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-left: none;
    }
  }
  &-right {
    border-right: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-right: none;
    }
  }
  &-x {
    border-left: 1px solid rgba(0, 0, 0, 0.12);
    border-right: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-left: none;
      border-right: none;
    }
  }
  &-y {
    border-top: 1px solid rgba(0, 0, 0, 0.12);
    border-bottom: 1px solid rgba(0, 0, 0, 0.12);
    &-none {
      border-top: none;
      border-bottom: none;
    }
  }
}

.no-link-style {
  text-decoration: none;
  color: initial;
}

@each $key, $value in $sizes {
  .w {
    @include bp-all {
      &-#{$key} {
        width: $value !important;
      }
    }
    &-#{$key} {
      width: $value;
    }
  }
  .h {
    @include bp-all {
      &-#{$key} {
        height: $value !important;
      }
    }
    &-#{$key} {
      height: $value;
    }
  }
  .max-h {
    @include bp-all {
      &-#{$key} {
        max-height: $value !important;
      }
    }
    &-#{$key} {
      max-height: $value;
    }
  }
  .min-h {
    @include bp-all {
      &-#{$key} {
        min-height: $value !important;
      }
    }
    &-#{$key} {
      min-height: $value;
    }
  }
}

.w-fit-content {
  width: -webkit-fit-content;
  width: -moz-fit-content;
}
.w-fill-available {
  width: -webkit-fill-available;
  width: -moz-available;
}

.h-fit-content {
  height: -webkit-fit-content;
  height: -moz-fit-content;
}
.h-fill-available {
  height: -webkit-fill-available;
  height: -moz-available;
}

@each $key, $value in $gaps {
  .gap-#{$key} {
    gap: $value;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: map-get($map: $text-weights, $key: medium) !important;
}

.text-underline {
  text-decoration: underline;
}

.q-no-hoverable {
  &:hover {
    & > .q-focus-helper {
      opacity: 0 !important;
    }
  }
}

.cursor {
  &-loading {
    cursor: wait;
  }
}

.no-link-style {
  text-decoration: none;
  color: inherit;
}

.row {
  display: flex;
  flex-direction: row;
  @include bp-all {
    display: flex !important;
    flex-direction: row !important;
  }
}

.column {
  display: flex;
  flex-direction: column;
  @include bp-all {
    display: flex !important;
    flex-direction: column !important;
  }
}

.justify {
  @include bp-all {
    &-start {
      justify-content: flex-start !important;
    }
    &-end {
      justify-content: flex-end !important;
    }
    &-center {
      justify-content: center !important;
    }
    &-between {
      justify-content: space-between !important;
    }
    &-around {
      justify-content: space-around !important;
    }
    &-evenly {
      justify-content: space-evenly !important;
    }
  }
}

.q {
  // all responsive spacing
  @each $classCode, $spaceingType in $space-types {
    &-#{$classCode} {
      @each $suffix, $datas in $spaces-repo {
        &#{$suffix} {
          @each $bpKey, $bpValue in $bps {
            &-#{$bpKey} {
              @include bp($bpKey) {
                @each $spaceKey, $spaceValue in $spaces {
                  &-#{$spaceKey} {
                    @each $label, $axe in $datas {
                      #{$spaceingType}-#{$label}: map-get($spaceValue, $axe) !important;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
